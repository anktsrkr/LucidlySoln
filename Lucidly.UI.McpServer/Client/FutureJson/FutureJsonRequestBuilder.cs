// <auto-generated/>
#pragma warning disable CS0618
using Lucidly.UI.McpServer.WeatherAPI.Client.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson
{
    /// <summary>
    /// Builds and executes requests for operations under \future.json
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class FutureJsonRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureJsonRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FutureJsonRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/future.json?q={q}{&dt*,lang*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureJsonRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FutureJsonRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/future.json?q={q}{&dt*,lang*}", rawUrl)
        {
        }
        /// <summary>
        /// Future weather API method returns weather in a 3 hourly interval in future for a date between 14 days and 365 days from today in the future.
        /// </summary>
        /// <returns>A <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error400">When receiving a 400 status code</exception>
        /// <exception cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error401">When receiving a 401 status code</exception>
        /// <exception cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error403">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureGetResponse?> GetAsFutureGetResponseAsync(Action<RequestConfiguration<global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureJsonRequestBuilder.FutureJsonRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureGetResponse> GetAsFutureGetResponseAsync(Action<RequestConfiguration<global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureJsonRequestBuilder.FutureJsonRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error400.CreateFromDiscriminatorValue },
                { "401", global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error401.CreateFromDiscriminatorValue },
                { "403", global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error403.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureGetResponse>(requestInfo, global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Future weather API method returns weather in a 3 hourly interval in future for a date between 14 days and 365 days from today in the future.
        /// </summary>
        /// <returns>A <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error400">When receiving a 400 status code</exception>
        /// <exception cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error401">When receiving a 401 status code</exception>
        /// <exception cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error403">When receiving a 403 status code</exception>
        [Obsolete("This method is obsolete. Use GetAsFutureGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureResponse?> GetAsync(Action<RequestConfiguration<global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureJsonRequestBuilder.FutureJsonRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureResponse> GetAsync(Action<RequestConfiguration<global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureJsonRequestBuilder.FutureJsonRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error400.CreateFromDiscriminatorValue },
                { "401", global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error401.CreateFromDiscriminatorValue },
                { "403", global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error403.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureResponse>(requestInfo, global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Future weather API method returns weather in a 3 hourly interval in future for a date between 14 days and 365 days from today in the future.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureJsonRequestBuilder.FutureJsonRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureJsonRequestBuilder.FutureJsonRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureJsonRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureJsonRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureJsonRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Future weather API method returns weather in a 3 hourly interval in future for a date between 14 days and 365 days from today in the future.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class FutureJsonRequestBuilderGetQueryParameters 
        {
            /// <summary>Date should be between 14 days and 300 days from today in the future in yyyy-MM-dd format (i.e. dt=2023-01-01)</summary>
            [QueryParameter("dt")]
            public Date? Dt { get; set; }
            /// <summary>Returns &apos;condition:text&apos; field in API in the desired language.&lt;br /&gt; Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check &apos;lang-code&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("lang")]
            public string? Lang { get; set; }
#nullable restore
#else
            [QueryParameter("lang")]
            public string Lang { get; set; }
#endif
            /// <summary>Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("q")]
            public string? Q { get; set; }
#nullable restore
#else
            [QueryParameter("q")]
            public string Q { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class FutureJsonRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureJsonRequestBuilder.FutureJsonRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

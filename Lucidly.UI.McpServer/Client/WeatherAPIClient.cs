// <auto-generated/>
#pragma warning disable CS0618
using Lucidly.UI.McpServer.WeatherAPI.Client.AstronomyJson;
using Lucidly.UI.McpServer.WeatherAPI.Client.CurrentJson;
using Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson;
using Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson;
using Lucidly.UI.McpServer.WeatherAPI.Client.HistoryJson;
using Lucidly.UI.McpServer.WeatherAPI.Client.IpJson;
using Lucidly.UI.McpServer.WeatherAPI.Client.MarineJson;
using Lucidly.UI.McpServer.WeatherAPI.Client.SearchJson;
using Lucidly.UI.McpServer.WeatherAPI.Client.TimezoneJson;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
namespace Lucidly.UI.McpServer.WeatherAPI.Client
{
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WeatherAPIClient : BaseRequestBuilder
    {
        /// <summary>The astronomyJson property</summary>
        public global::Lucidly.UI.McpServer.WeatherAPI.Client.AstronomyJson.AstronomyJsonRequestBuilder AstronomyJson
        {
            get => new global::Lucidly.UI.McpServer.WeatherAPI.Client.AstronomyJson.AstronomyJsonRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The currentJson property</summary>
        public global::Lucidly.UI.McpServer.WeatherAPI.Client.CurrentJson.CurrentJsonRequestBuilder CurrentJson
        {
            get => new global::Lucidly.UI.McpServer.WeatherAPI.Client.CurrentJson.CurrentJsonRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The forecastJson property</summary>
        public global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastJsonRequestBuilder ForecastJson
        {
            get => new global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastJsonRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The futureJson property</summary>
        public global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureJsonRequestBuilder FutureJson
        {
            get => new global::Lucidly.UI.McpServer.WeatherAPI.Client.FutureJson.FutureJsonRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The historyJson property</summary>
        public global::Lucidly.UI.McpServer.WeatherAPI.Client.HistoryJson.HistoryJsonRequestBuilder HistoryJson
        {
            get => new global::Lucidly.UI.McpServer.WeatherAPI.Client.HistoryJson.HistoryJsonRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ipJson property</summary>
        public global::Lucidly.UI.McpServer.WeatherAPI.Client.IpJson.IpJsonRequestBuilder IpJson
        {
            get => new global::Lucidly.UI.McpServer.WeatherAPI.Client.IpJson.IpJsonRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The marineJson property</summary>
        public global::Lucidly.UI.McpServer.WeatherAPI.Client.MarineJson.MarineJsonRequestBuilder MarineJson
        {
            get => new global::Lucidly.UI.McpServer.WeatherAPI.Client.MarineJson.MarineJsonRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The searchJson property</summary>
        public global::Lucidly.UI.McpServer.WeatherAPI.Client.SearchJson.SearchJsonRequestBuilder SearchJson
        {
            get => new global::Lucidly.UI.McpServer.WeatherAPI.Client.SearchJson.SearchJsonRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The timezoneJson property</summary>
        public global::Lucidly.UI.McpServer.WeatherAPI.Client.TimezoneJson.TimezoneJsonRequestBuilder TimezoneJson
        {
            get => new global::Lucidly.UI.McpServer.WeatherAPI.Client.TimezoneJson.TimezoneJsonRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.WeatherAPIClient"/> and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WeatherAPIClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>())
        {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl))
            {
                RequestAdapter.BaseUrl = "https://api.weatherapi.com/v1";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
    }
}
#pragma warning restore CS0618

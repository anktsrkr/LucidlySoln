// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Lucidly.UI.McpServer.WeatherAPI.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Alerts_alert : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The areas property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Areas { get; set; }
#nullable restore
#else
        public string Areas { get; set; }
#endif
        /// <summary>The category property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Category { get; set; }
#nullable restore
#else
        public string Category { get; set; }
#endif
        /// <summary>The certainty property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Certainty { get; set; }
#nullable restore
#else
        public string Certainty { get; set; }
#endif
        /// <summary>The desc property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Desc { get; set; }
#nullable restore
#else
        public string Desc { get; set; }
#endif
        /// <summary>The effective property</summary>
        public DateTimeOffset? Effective { get; set; }
        /// <summary>The event property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Event { get; set; }
#nullable restore
#else
        public string Event { get; set; }
#endif
        /// <summary>The expires property</summary>
        public DateTimeOffset? Expires { get; set; }
        /// <summary>The headline property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Headline { get; set; }
#nullable restore
#else
        public string Headline { get; set; }
#endif
        /// <summary>The instruction property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Instruction { get; set; }
#nullable restore
#else
        public string Instruction { get; set; }
#endif
        /// <summary>The msgtype property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Msgtype { get; set; }
#nullable restore
#else
        public string Msgtype { get; set; }
#endif
        /// <summary>The note property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Note { get; set; }
#nullable restore
#else
        public string Note { get; set; }
#endif
        /// <summary>The severity property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Severity { get; set; }
#nullable restore
#else
        public string Severity { get; set; }
#endif
        /// <summary>The urgency property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Urgency { get; set; }
#nullable restore
#else
        public string Urgency { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Alerts_alert"/> and sets the default values.
        /// </summary>
        public Alerts_alert()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Alerts_alert"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Alerts_alert CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Alerts_alert();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "areas", n => { Areas = n.GetStringValue(); } },
                { "category", n => { Category = n.GetStringValue(); } },
                { "certainty", n => { Certainty = n.GetStringValue(); } },
                { "desc", n => { Desc = n.GetStringValue(); } },
                { "effective", n => { Effective = n.GetDateTimeOffsetValue(); } },
                { "event", n => { Event = n.GetStringValue(); } },
                { "expires", n => { Expires = n.GetDateTimeOffsetValue(); } },
                { "headline", n => { Headline = n.GetStringValue(); } },
                { "instruction", n => { Instruction = n.GetStringValue(); } },
                { "msgtype", n => { Msgtype = n.GetStringValue(); } },
                { "note", n => { Note = n.GetStringValue(); } },
                { "severity", n => { Severity = n.GetStringValue(); } },
                { "urgency", n => { Urgency = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("areas", Areas);
            writer.WriteStringValue("category", Category);
            writer.WriteStringValue("certainty", Certainty);
            writer.WriteStringValue("desc", Desc);
            writer.WriteDateTimeOffsetValue("effective", Effective);
            writer.WriteStringValue("event", Event);
            writer.WriteDateTimeOffsetValue("expires", Expires);
            writer.WriteStringValue("headline", Headline);
            writer.WriteStringValue("instruction", Instruction);
            writer.WriteStringValue("msgtype", Msgtype);
            writer.WriteStringValue("note", Note);
            writer.WriteStringValue("severity", Severity);
            writer.WriteStringValue("urgency", Urgency);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Lucidly.UI.McpServer.WeatherAPI.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Marine_forecastday_day : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The avghumidity property</summary>
        public double? Avghumidity { get; set; }
        /// <summary>The avgtemp_c property</summary>
        public double? AvgtempC { get; set; }
        /// <summary>The avgtemp_f property</summary>
        public double? AvgtempF { get; set; }
        /// <summary>The avgvis_km property</summary>
        public double? AvgvisKm { get; set; }
        /// <summary>The avgvis_miles property</summary>
        public double? AvgvisMiles { get; set; }
        /// <summary>The condition property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Marine_forecastday_day_condition? Condition { get; set; }
#nullable restore
#else
        public global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Marine_forecastday_day_condition Condition { get; set; }
#endif
        /// <summary>The daily_chance_of_rain property</summary>
        public double? DailyChanceOfRain { get; set; }
        /// <summary>The daily_chance_of_snow property</summary>
        public double? DailyChanceOfSnow { get; set; }
        /// <summary>The daily_will_it_rain property</summary>
        public int? DailyWillItRain { get; set; }
        /// <summary>The daily_will_it_snow property</summary>
        public int? DailyWillItSnow { get; set; }
        /// <summary>The maxtemp_c property</summary>
        public double? MaxtempC { get; set; }
        /// <summary>The maxtemp_f property</summary>
        public double? MaxtempF { get; set; }
        /// <summary>The maxwind_kph property</summary>
        public double? MaxwindKph { get; set; }
        /// <summary>The maxwind_mph property</summary>
        public double? MaxwindMph { get; set; }
        /// <summary>The mintemp_c property</summary>
        public double? MintempC { get; set; }
        /// <summary>The mintemp_f property</summary>
        public double? MintempF { get; set; }
        /// <summary>The totalprecip_in property</summary>
        public double? TotalprecipIn { get; set; }
        /// <summary>The totalprecip_mm property</summary>
        public double? TotalprecipMm { get; set; }
        /// <summary>The uv property</summary>
        public int? Uv { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Marine_forecastday_day"/> and sets the default values.
        /// </summary>
        public Marine_forecastday_day()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Marine_forecastday_day"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Marine_forecastday_day CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Marine_forecastday_day();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "avghumidity", n => { Avghumidity = n.GetDoubleValue(); } },
                { "avgtemp_c", n => { AvgtempC = n.GetDoubleValue(); } },
                { "avgtemp_f", n => { AvgtempF = n.GetDoubleValue(); } },
                { "avgvis_km", n => { AvgvisKm = n.GetDoubleValue(); } },
                { "avgvis_miles", n => { AvgvisMiles = n.GetDoubleValue(); } },
                { "condition", n => { Condition = n.GetObjectValue<global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Marine_forecastday_day_condition>(global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Marine_forecastday_day_condition.CreateFromDiscriminatorValue); } },
                { "daily_chance_of_rain", n => { DailyChanceOfRain = n.GetDoubleValue(); } },
                { "daily_chance_of_snow", n => { DailyChanceOfSnow = n.GetDoubleValue(); } },
                { "daily_will_it_rain", n => { DailyWillItRain = n.GetIntValue(); } },
                { "daily_will_it_snow", n => { DailyWillItSnow = n.GetIntValue(); } },
                { "maxtemp_c", n => { MaxtempC = n.GetDoubleValue(); } },
                { "maxtemp_f", n => { MaxtempF = n.GetDoubleValue(); } },
                { "maxwind_kph", n => { MaxwindKph = n.GetDoubleValue(); } },
                { "maxwind_mph", n => { MaxwindMph = n.GetDoubleValue(); } },
                { "mintemp_c", n => { MintempC = n.GetDoubleValue(); } },
                { "mintemp_f", n => { MintempF = n.GetDoubleValue(); } },
                { "totalprecip_in", n => { TotalprecipIn = n.GetDoubleValue(); } },
                { "totalprecip_mm", n => { TotalprecipMm = n.GetDoubleValue(); } },
                { "uv", n => { Uv = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("avghumidity", Avghumidity);
            writer.WriteDoubleValue("avgtemp_c", AvgtempC);
            writer.WriteDoubleValue("avgtemp_f", AvgtempF);
            writer.WriteDoubleValue("avgvis_km", AvgvisKm);
            writer.WriteDoubleValue("avgvis_miles", AvgvisMiles);
            writer.WriteObjectValue<global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Marine_forecastday_day_condition>("condition", Condition);
            writer.WriteDoubleValue("daily_chance_of_rain", DailyChanceOfRain);
            writer.WriteDoubleValue("daily_chance_of_snow", DailyChanceOfSnow);
            writer.WriteIntValue("daily_will_it_rain", DailyWillItRain);
            writer.WriteIntValue("daily_will_it_snow", DailyWillItSnow);
            writer.WriteDoubleValue("maxtemp_c", MaxtempC);
            writer.WriteDoubleValue("maxtemp_f", MaxtempF);
            writer.WriteDoubleValue("maxwind_kph", MaxwindKph);
            writer.WriteDoubleValue("maxwind_mph", MaxwindMph);
            writer.WriteDoubleValue("mintemp_c", MintempC);
            writer.WriteDoubleValue("mintemp_f", MintempF);
            writer.WriteDoubleValue("totalprecip_in", TotalprecipIn);
            writer.WriteDoubleValue("totalprecip_mm", TotalprecipMm);
            writer.WriteIntValue("uv", Uv);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Lucidly.UI.McpServer.WeatherAPI.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Ip : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The city property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? City { get; set; }
#nullable restore
#else
        public string City { get; set; }
#endif
        /// <summary>The continent_code property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContinentCode { get; set; }
#nullable restore
#else
        public string ContinentCode { get; set; }
#endif
        /// <summary>The continent_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContinentName { get; set; }
#nullable restore
#else
        public string ContinentName { get; set; }
#endif
        /// <summary>The country_code property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CountryCode { get; set; }
#nullable restore
#else
        public string CountryCode { get; set; }
#endif
        /// <summary>The country_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CountryName { get; set; }
#nullable restore
#else
        public string CountryName { get; set; }
#endif
        /// <summary>The geoname_id property</summary>
        public int? GeonameId { get; set; }
        /// <summary>The ip property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IpProp { get; set; }
#nullable restore
#else
        public string IpProp { get; set; }
#endif
        /// <summary>The is_eu property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IsEu { get; set; }
#nullable restore
#else
        public string IsEu { get; set; }
#endif
        /// <summary>The lat property</summary>
        public double? Lat { get; set; }
        /// <summary>The localtime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Localtime { get; set; }
#nullable restore
#else
        public string Localtime { get; set; }
#endif
        /// <summary>The localtime_epoch property</summary>
        public int? LocaltimeEpoch { get; set; }
        /// <summary>The lon property</summary>
        public double? Lon { get; set; }
        /// <summary>The region property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Region { get; set; }
#nullable restore
#else
        public string Region { get; set; }
#endif
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The tz_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TzId { get; set; }
#nullable restore
#else
        public string TzId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Ip"/> and sets the default values.
        /// </summary>
        public Ip()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Ip"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Ip CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Ip();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "city", n => { City = n.GetStringValue(); } },
                { "continent_code", n => { ContinentCode = n.GetStringValue(); } },
                { "continent_name", n => { ContinentName = n.GetStringValue(); } },
                { "country_code", n => { CountryCode = n.GetStringValue(); } },
                { "country_name", n => { CountryName = n.GetStringValue(); } },
                { "geoname_id", n => { GeonameId = n.GetIntValue(); } },
                { "ip", n => { IpProp = n.GetStringValue(); } },
                { "is_eu", n => { IsEu = n.GetStringValue(); } },
                { "lat", n => { Lat = n.GetDoubleValue(); } },
                { "localtime", n => { Localtime = n.GetStringValue(); } },
                { "localtime_epoch", n => { LocaltimeEpoch = n.GetIntValue(); } },
                { "lon", n => { Lon = n.GetDoubleValue(); } },
                { "region", n => { Region = n.GetStringValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
                { "tz_id", n => { TzId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("city", City);
            writer.WriteStringValue("continent_code", ContinentCode);
            writer.WriteStringValue("continent_name", ContinentName);
            writer.WriteStringValue("country_code", CountryCode);
            writer.WriteStringValue("country_name", CountryName);
            writer.WriteIntValue("geoname_id", GeonameId);
            writer.WriteStringValue("ip", IpProp);
            writer.WriteStringValue("is_eu", IsEu);
            writer.WriteDoubleValue("lat", Lat);
            writer.WriteStringValue("localtime", Localtime);
            writer.WriteIntValue("localtime_epoch", LocaltimeEpoch);
            writer.WriteDoubleValue("lon", Lon);
            writer.WriteStringValue("region", Region);
            writer.WriteStringValue("type", Type);
            writer.WriteStringValue("tz_id", TzId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

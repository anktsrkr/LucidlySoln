// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Lucidly.UI.McpServer.WeatherAPI.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Current : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The air_quality property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Current_air_quality? AirQuality { get; set; }
#nullable restore
#else
        public global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Current_air_quality AirQuality { get; set; }
#endif
        /// <summary>The cloud property</summary>
        public double? Cloud { get; set; }
        /// <summary>The condition property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Current_condition? Condition { get; set; }
#nullable restore
#else
        public global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Current_condition Condition { get; set; }
#endif
        /// <summary>The feelslike_c property</summary>
        public double? FeelslikeC { get; set; }
        /// <summary>The feelslike_f property</summary>
        public double? FeelslikeF { get; set; }
        /// <summary>The gust_kph property</summary>
        public double? GustKph { get; set; }
        /// <summary>The gust_mph property</summary>
        public double? GustMph { get; set; }
        /// <summary>The humidity property</summary>
        public double? Humidity { get; set; }
        /// <summary>The is_day property</summary>
        public int? IsDay { get; set; }
        /// <summary>The last_updated property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastUpdated { get; set; }
#nullable restore
#else
        public string LastUpdated { get; set; }
#endif
        /// <summary>The last_updated_epoch property</summary>
        public int? LastUpdatedEpoch { get; set; }
        /// <summary>The precip_in property</summary>
        public double? PrecipIn { get; set; }
        /// <summary>The precip_mm property</summary>
        public double? PrecipMm { get; set; }
        /// <summary>The pressure_in property</summary>
        public double? PressureIn { get; set; }
        /// <summary>The pressure_mb property</summary>
        public double? PressureMb { get; set; }
        /// <summary>The temp_c property</summary>
        public double? TempC { get; set; }
        /// <summary>The temp_f property</summary>
        public double? TempF { get; set; }
        /// <summary>The uv property</summary>
        public int? Uv { get; set; }
        /// <summary>The vis_km property</summary>
        public double? VisKm { get; set; }
        /// <summary>The vis_miles property</summary>
        public double? VisMiles { get; set; }
        /// <summary>The wind_degree property</summary>
        public double? WindDegree { get; set; }
        /// <summary>The wind_dir property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WindDir { get; set; }
#nullable restore
#else
        public string WindDir { get; set; }
#endif
        /// <summary>The wind_kph property</summary>
        public double? WindKph { get; set; }
        /// <summary>The wind_mph property</summary>
        public double? WindMph { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Current"/> and sets the default values.
        /// </summary>
        public Current()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Current"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Current CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Current();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "air_quality", n => { AirQuality = n.GetObjectValue<global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Current_air_quality>(global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Current_air_quality.CreateFromDiscriminatorValue); } },
                { "cloud", n => { Cloud = n.GetDoubleValue(); } },
                { "condition", n => { Condition = n.GetObjectValue<global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Current_condition>(global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Current_condition.CreateFromDiscriminatorValue); } },
                { "feelslike_c", n => { FeelslikeC = n.GetDoubleValue(); } },
                { "feelslike_f", n => { FeelslikeF = n.GetDoubleValue(); } },
                { "gust_kph", n => { GustKph = n.GetDoubleValue(); } },
                { "gust_mph", n => { GustMph = n.GetDoubleValue(); } },
                { "humidity", n => { Humidity = n.GetDoubleValue(); } },
                { "is_day", n => { IsDay = n.GetIntValue(); } },
                { "last_updated", n => { LastUpdated = n.GetStringValue(); } },
                { "last_updated_epoch", n => { LastUpdatedEpoch = n.GetIntValue(); } },
                { "precip_in", n => { PrecipIn = n.GetDoubleValue(); } },
                { "precip_mm", n => { PrecipMm = n.GetDoubleValue(); } },
                { "pressure_in", n => { PressureIn = n.GetDoubleValue(); } },
                { "pressure_mb", n => { PressureMb = n.GetDoubleValue(); } },
                { "temp_c", n => { TempC = n.GetDoubleValue(); } },
                { "temp_f", n => { TempF = n.GetDoubleValue(); } },
            //    { "uv", n => { Uv = n.GetIntValue(); } },
                { "vis_km", n => { VisKm = n.GetDoubleValue(); } },
                { "vis_miles", n => { VisMiles = n.GetDoubleValue(); } },
                { "wind_degree", n => { WindDegree = n.GetDoubleValue(); } },
                { "wind_dir", n => { WindDir = n.GetStringValue(); } },
                { "wind_kph", n => { WindKph = n.GetDoubleValue(); } },
                { "wind_mph", n => { WindMph = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Current_air_quality>("air_quality", AirQuality);
            writer.WriteDoubleValue("cloud", Cloud);
            writer.WriteObjectValue<global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Current_condition>("condition", Condition);
            writer.WriteDoubleValue("feelslike_c", FeelslikeC);
            writer.WriteDoubleValue("feelslike_f", FeelslikeF);
            writer.WriteDoubleValue("gust_kph", GustKph);
            writer.WriteDoubleValue("gust_mph", GustMph);
            writer.WriteDoubleValue("humidity", Humidity);
            writer.WriteIntValue("is_day", IsDay);
            writer.WriteStringValue("last_updated", LastUpdated);
            writer.WriteIntValue("last_updated_epoch", LastUpdatedEpoch);
            writer.WriteDoubleValue("precip_in", PrecipIn);
            writer.WriteDoubleValue("precip_mm", PrecipMm);
            writer.WriteDoubleValue("pressure_in", PressureIn);
            writer.WriteDoubleValue("pressure_mb", PressureMb);
            writer.WriteDoubleValue("temp_c", TempC);
            writer.WriteDoubleValue("temp_f", TempF);
            writer.WriteIntValue("uv", Uv);
            writer.WriteDoubleValue("vis_km", VisKm);
            writer.WriteDoubleValue("vis_miles", VisMiles);
            writer.WriteDoubleValue("wind_degree", WindDegree);
            writer.WriteStringValue("wind_dir", WindDir);
            writer.WriteDoubleValue("wind_kph", WindKph);
            writer.WriteDoubleValue("wind_mph", WindMph);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

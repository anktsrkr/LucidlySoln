// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Lucidly.UI.McpServer.WeatherAPI.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Astronomy_astro : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The moon_illumination property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MoonIllumination { get; set; }
#nullable restore
#else
        public string MoonIllumination { get; set; }
#endif
        /// <summary>The moon_phase property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MoonPhase { get; set; }
#nullable restore
#else
        public string MoonPhase { get; set; }
#endif
        /// <summary>The moonrise property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Moonrise { get; set; }
#nullable restore
#else
        public string Moonrise { get; set; }
#endif
        /// <summary>The moonset property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Moonset { get; set; }
#nullable restore
#else
        public string Moonset { get; set; }
#endif
        /// <summary>The sunrise property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sunrise { get; set; }
#nullable restore
#else
        public string Sunrise { get; set; }
#endif
        /// <summary>The sunset property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sunset { get; set; }
#nullable restore
#else
        public string Sunset { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Astronomy_astro"/> and sets the default values.
        /// </summary>
        public Astronomy_astro()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Astronomy_astro"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Astronomy_astro CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Astronomy_astro();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "moon_illumination", n => { MoonIllumination = n.GetStringValue(); } },
                { "moon_phase", n => { MoonPhase = n.GetStringValue(); } },
                { "moonrise", n => { Moonrise = n.GetStringValue(); } },
                { "moonset", n => { Moonset = n.GetStringValue(); } },
                { "sunrise", n => { Sunrise = n.GetStringValue(); } },
                { "sunset", n => { Sunset = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("moon_illumination", MoonIllumination);
            writer.WriteStringValue("moon_phase", MoonPhase);
            writer.WriteStringValue("moonrise", Moonrise);
            writer.WriteStringValue("moonset", Moonset);
            writer.WriteStringValue("sunrise", Sunrise);
            writer.WriteStringValue("sunset", Sunset);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

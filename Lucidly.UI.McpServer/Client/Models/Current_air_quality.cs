// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Lucidly.UI.McpServer.WeatherAPI.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Current_air_quality : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The co property</summary>
        public double? Co { get; set; }
        /// <summary>The gbDefraIndex property</summary>
        public int? GbDefraIndex { get; set; }
        /// <summary>The no2 property</summary>
        public double? No2 { get; set; }
        /// <summary>The o3 property</summary>
        public double? O3 { get; set; }
        /// <summary>The pm10 property</summary>
        public double? Pm10 { get; set; }
        /// <summary>The pm2_5 property</summary>
        public double? Pm25 { get; set; }
        /// <summary>The so2 property</summary>
        public double? So2 { get; set; }
        /// <summary>The usEpaIndex property</summary>
        public int? UsEpaIndex { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Current_air_quality"/> and sets the default values.
        /// </summary>
        public Current_air_quality()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Current_air_quality"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Current_air_quality CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Current_air_quality();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "co", n => { Co = n.GetDoubleValue(); } },
                { "gb-defra-index", n => { GbDefraIndex = n.GetIntValue(); } },
                { "no2", n => { No2 = n.GetDoubleValue(); } },
                { "o3", n => { O3 = n.GetDoubleValue(); } },
                { "pm10", n => { Pm10 = n.GetDoubleValue(); } },
                { "pm2_5", n => { Pm25 = n.GetDoubleValue(); } },
                { "so2", n => { So2 = n.GetDoubleValue(); } },
                { "us-epa-index", n => { UsEpaIndex = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("co", Co);
            writer.WriteIntValue("gb-defra-index", GbDefraIndex);
            writer.WriteDoubleValue("no2", No2);
            writer.WriteDoubleValue("o3", O3);
            writer.WriteDoubleValue("pm10", Pm10);
            writer.WriteDoubleValue("pm2_5", Pm25);
            writer.WriteDoubleValue("so2", So2);
            writer.WriteIntValue("us-epa-index", UsEpaIndex);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

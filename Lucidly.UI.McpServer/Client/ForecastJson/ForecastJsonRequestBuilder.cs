// <auto-generated/>
#pragma warning disable CS0618
using Lucidly.UI.McpServer.WeatherAPI.Client.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson
{
    /// <summary>
    /// Builds and executes requests for operations under \forecast.json
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ForecastJsonRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastJsonRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ForecastJsonRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/forecast.json?days={days}&q={q}{&alerts*,aqi*,dt*,hour*,lang*,tp*,unixdt*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastJsonRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ForecastJsonRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/forecast.json?days={days}&q={q}{&alerts*,aqi*,dt*,hour*,lang*,tp*,unixdt*}", rawUrl)
        {
        }
        /// <summary>
        /// Forecast weather API method returns, depending upon your price plan level, upto next 14 day weather forecast and weather alert as json or xml. The data is returned as a Forecast Object.&lt;br /&gt;&lt;br /&gt;Forecast object contains astronomy data, day weather forecast and hourly interval weather information for a given city.
        /// </summary>
        /// <returns>A <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error400">When receiving a 400 status code</exception>
        /// <exception cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error401">When receiving a 401 status code</exception>
        /// <exception cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error403">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastGetResponse?> GetAsForecastGetResponseAsync(Action<RequestConfiguration<global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastJsonRequestBuilder.ForecastJsonRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastGetResponse> GetAsForecastGetResponseAsync(Action<RequestConfiguration<global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastJsonRequestBuilder.ForecastJsonRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error400.CreateFromDiscriminatorValue },
                { "401", global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error401.CreateFromDiscriminatorValue },
                { "403", global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error403.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastGetResponse>(requestInfo, global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Forecast weather API method returns, depending upon your price plan level, upto next 14 day weather forecast and weather alert as json or xml. The data is returned as a Forecast Object.&lt;br /&gt;&lt;br /&gt;Forecast object contains astronomy data, day weather forecast and hourly interval weather information for a given city.
        /// </summary>
        /// <returns>A <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error400">When receiving a 400 status code</exception>
        /// <exception cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error401">When receiving a 401 status code</exception>
        /// <exception cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error403">When receiving a 403 status code</exception>
        [Obsolete("This method is obsolete. Use GetAsForecastGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastResponse?> GetAsync(Action<RequestConfiguration<global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastJsonRequestBuilder.ForecastJsonRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastResponse> GetAsync(Action<RequestConfiguration<global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastJsonRequestBuilder.ForecastJsonRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error400.CreateFromDiscriminatorValue },
                { "401", global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error401.CreateFromDiscriminatorValue },
                { "403", global::Lucidly.UI.McpServer.WeatherAPI.Client.Models.Error403.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastResponse>(requestInfo, global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Forecast weather API method returns, depending upon your price plan level, upto next 14 day weather forecast and weather alert as json or xml. The data is returned as a Forecast Object.&lt;br /&gt;&lt;br /&gt;Forecast object contains astronomy data, day weather forecast and hourly interval weather information for a given city.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastJsonRequestBuilder.ForecastJsonRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastJsonRequestBuilder.ForecastJsonRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastJsonRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastJsonRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastJsonRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Forecast weather API method returns, depending upon your price plan level, upto next 14 day weather forecast and weather alert as json or xml. The data is returned as a Forecast Object.&lt;br /&gt;&lt;br /&gt;Forecast object contains astronomy data, day weather forecast and hourly interval weather information for a given city.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ForecastJsonRequestBuilderGetQueryParameters 
        {
            /// <summary>Enable/Disable alerts in forecast API output. Example, alerts=yes or alerts=no.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("alerts")]
            public string? Alerts { get; set; }
#nullable restore
#else
            [QueryParameter("alerts")]
            public string Alerts { get; set; }
#endif
            /// <summary>Enable/Disable Air Quality data in forecast API output. Example, aqi=yes or aqi=no.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("aqi")]
            public string? Aqi { get; set; }
#nullable restore
#else
            [QueryParameter("aqi")]
            public string Aqi { get; set; }
#endif
            /// <summary>Number of days of weather forecast. Value ranges from 1 to 14</summary>
            [QueryParameter("days")]
            public int? Days { get; set; }
            /// <summary>Date should be between today and next 14 day in yyyy-MM-dd format. e.g. &apos;2015-01-01&apos;</summary>
            [QueryParameter("dt")]
            public Date? Dt { get; set; }
            /// <summary>Must be in 24 hour. For example 5 pm should be hour=17, 6 am as hour=6</summary>
            [QueryParameter("hour")]
            public int? Hour { get; set; }
            /// <summary>Returns &apos;condition:text&apos; field in API in the desired language.&lt;br /&gt; Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check &apos;lang-code&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("lang")]
            public string? Lang { get; set; }
#nullable restore
#else
            [QueryParameter("lang")]
            public string Lang { get; set; }
#endif
            /// <summary>Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("q")]
            public string? Q { get; set; }
#nullable restore
#else
            [QueryParameter("q")]
            public string Q { get; set; }
#endif
            /// <summary>Get 15 min interval or 24 hour average data for Forecast and History API. Available for Enterprise clients only. E.g:- tp=15</summary>
            [QueryParameter("tp")]
            public int? Tp { get; set; }
            /// <summary>Please either pass &apos;dt&apos; or &apos;unixdt&apos; and not both in same request. unixdt should be between today and next 14 day in Unix format. e.g. 1490227200</summary>
            [QueryParameter("unixdt")]
            public int? Unixdt { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ForecastJsonRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Lucidly.UI.McpServer.WeatherAPI.Client.ForecastJson.ForecastJsonRequestBuilder.ForecastJsonRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
